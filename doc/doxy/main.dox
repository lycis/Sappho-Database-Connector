/** \mainpage
 * see also:
 * \subpage Features
 * \subpage Tutorial
 *
 * \section main-overview Overview
 *  This documentation is valid for iteration SDBC#0001 only!
 *
 *  The Sappho Database Connector (SDBC) is a PHP class that is able to establish a conenction
 *  to differnt types of database like MySQL or postgreSQL. It main advantage is that you - as
 *  a developer - don't have to care about the correct syntax of a statement or calling the
 *  right PHP functions to issue the SQL commands th the database.
 *
 * \section main-advanages Why use SDBC?
 *  The advantages will be obvious if we consider the following examples. 
 *
 * \subsection main-advantages-example1 Example I: Customer's opionions - and consequences
 *  If you did code a big webapplication for a customer that always used MySQL as backend database. 
 *  Imagine about thounands of database requests that are sent to the database in you'r code. Now 
 *  imagine  further that the customer suddenly - like all customers do once in a while - wants to 
 *  change his or her database system to another one like postgreSQL. You would have to rewrite
 *  whole sections of code to satisfy the needs of your employer - and you'd lose some
 *  hours of your life by just doing that. 
 *
 *  Now consider what happens if you use a DB Interface like the SDBC. You could reduce the
 *  effort of rewriting code by just changing the type of your database from \c db_type_mysql
 *  to \c db_type_postgresql! (Well of course there are always statements and code sections that
 *  need adaption, but these are only a few)
 *
 * \subsection main-advantages-example2 Example II: Supporting multiple database types
 *  Again I require a bit of your imagination. Think about an other webapplication you coded
 *  that is quite huge and offers a lot of configurable options - ranging from the background
 *  color of the page to the amount of lines per page. There even might be an option to
 *  configure which kind of database I want to use.
 *
 *  Usually it will require lots and lots of code to ensure that the webmaster can choose if
 *  he (or she) wants to use MySQL or postgreSQL or anything else. You'd have to write all
 *  the code from connection to the database to issuing a query and finally closing the conenction
 *  at least twice. Like stated before: lots and lots of code...
 *
 *  If you use the SDBC the only thing you'll have to do if the webmaster want's to use a different
 *  databse is to change the type of the database when creating an instance of the SDBC. You see:
 *  loads of code saved for later use!
 *
 * \section main-howto How SDBC works
 *  Let's take a short look about how the Sappho Database Connectoion works. Basically you'll need
 *  three steps: 
 *  -# Establish connection
 *  -# Send request to database
 *  -# Close connection
 *  We'll take a short look about all of the three steps.
 *
 * \subsection main-howoto-connect Establishing connection
 *  To establish a new connection to the database you'll first need an instance of the SDBC. When
 *  creating this instance you have to pass almost all connection data to the class:
 *  \code
 *     $sdbc = SapphoDatabaseConnection(SapphoDatabasConnetion::db_type_mysql,
 *                                      'localhost',
 *                                      'mydb',
 *                                      'userX');
 *  \endcode
 *  After this you'll have to log on to the database using a password.
 *  You probably want to know if the connection was successful and exit if not. Luckily the
 *  SDBC has a very easy concept for this task. Whenever a method did not execute sucessful it
 *  will return a returncode greather than 0.
 *  \code
 *    if($sdbc->connect('password123')) die("Connection was not established!");
 *  \endcode
 *
 * \subsection main-howto-workondb Request something from the database
 *  To send a statement to the database you only have to call the according method of the class,
 *  pass the requested parameters and the SQL statement will be generated by the SDBC and
 *  executed.
 *  \code
 *    if($sdbc->select('products', '*', 'availability > 0')) 
 *       die("Error while getting products: ".$dbc->lastError());
 *    while($data = $sdbc->nextData())
 *       echo "Procduct #".$data['id'].": ".$data['name']." costs &euro;".$data['price'];
 *  \endcode
 *  In the example above you cann see some very useful functions of the SDBC. First a
 *  \c SELECT statement is sent to the database and if an error occured we'll print the
 *  error message to show what caused it. Afterwards every retrieved dataset is printed.
 *
 * \subsection main-howoto-close Close connection
 *  At some point you'll be finished using the database and so you have to close the
 *  database conenction. In fact, this task is \emp optional because the connection is
 *  automatically closed if the SDBC Class is desctructed. But maybe you want to do this
 *  manually:
 *  \code
 *    $sdbc->close();
 *  \endcode
 *
 * \section main-overallexample An overall example
 *  We'll conclude this introductory text with a short example. It establishes a database
 *  connection and queries some data from a table.
 *  \code
 *    <?php
 *       $sdbc = SapphoDatabaseConnection(SapphoDatabasConnetion::db_type_mysql,
 *                                        'localhost',
 *                                        'mydb',
 *                                        'userX');
 *       if($sdbc->connect('password123')) die("Connection could not be established!")
 *
 *       if($sdbc->select('temp_table', array('id', 'data'), 'id = 0'))
 *          die("Error while reading data: ".$sdbc->lastError());
 *       
 *       $sdbc->close();
 *    ?>
 *  \endcode
 *
 */